# DigitalOcean Droplet Dockerfile
FROM node:18-alpine AS base

# Install pnpm
RUN corepack enable && corepack prepare pnpm@latest --activate

# Set working directory
WORKDIR /app

# Copy package files
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Create directory structure and copy package.json files
COPY apps/api/package.json ./apps/api/package.json
COPY apps/web/package.json ./apps/web/package.json

# Copy all package directories to ensure proper workspace setup
COPY packages/ ./packages/

# Install dependencies
RUN pnpm install

# Copy source code
COPY . .

# Build applications
RUN pnpm build

# Production stage for API
FROM node:18-alpine AS api
WORKDIR /app

# Install curl for health checks
RUN apk add --no-cache curl

# Copy built API and dependencies
COPY --from=base /app/apps/api/dist ./
COPY --from=base /app/apps/api/package.json ./package.json
COPY --from=base /app/node_modules ./node_modules

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
RUN chown -R nodejs:nodejs /app
USER nodejs

EXPOSE 8080

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD curl -f http://localhost:8080/health || exit 1

CMD ["node", "index.js"]

# Production stage for Web
FROM node:18-alpine AS web
WORKDIR /app

# Install wget for health checks
RUN apk add --no-cache wget

# Copy built Next.js app and dependencies
COPY --from=base /app/apps/web/.next/standalone ./
COPY --from=base /app/apps/web/.next/static ./.next/static
COPY --from=base /app/apps/web/public ./public

# Create non-root user
RUN addgroup -g 1001 -S nodejs && adduser -S nodejs -u 1001
RUN chown -R nodejs:nodejs /app
USER nodejs

EXPOSE 3000

HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
  CMD wget --no-verbose --tries=1 --spider http://localhost:3000/health || exit 1

CMD ["node", "server.js"]
