version: "3.8"

services:
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-questly}
      POSTGRES_USER: ${POSTGRES_USER:-questly}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=peer"
    ports:
      - "127.0.0.1:5432:5432" # Only bind to localhost
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ../configs/postgresql.conf:/etc/postgresql/postgresql.conf
      - ../configs/pg_hba.conf:/etc/postgresql/pg_hba.conf
      - ../configs/init-scripts:/docker-entrypoint-initdb.d
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c hba_file=/etc/postgresql/pg_hba.conf
    healthcheck:
      test:
        [
          "CMD-SHELL",
          "pg_isready -U ${POSTGRES_USER:-questly} -d ${POSTGRES_DB:-questly}",
        ]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - app-network

  api:
    build:
      context: .
      dockerfile: Dockerfile.digitalocean
      target: api
    restart: unless-stopped # Better than 'always' - won't restart if manually stopped
    ports:
      - "8080:8080"
    environment:
      NODE_ENV: production
      PORT: 8080
      DATABASE_URL: postgresql://${POSTGRES_USER:-questly}:${POSTGRES_PASSWORD}@postgres:5432/${POSTGRES_DB:-questly}
      JWT_SECRET: ${JWT_SECRET}
      BETTER_AUTH_SECRET: ${BETTER_AUTH_SECRET}
      FRONTEND_URL: ${FRONTEND_URL:-http://localhost:3000}
    depends_on:
      postgres:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 20s # Check more frequently
      timeout: 5s # Faster timeout
      retries: 3
      start_period: 30s # Give app time to start before health checks
    deploy:
      resources:
        limits:
          memory: 1G # Prevent memory leaks from crashing system
          cpus: "1.0"
        reservations:
          memory: 256M
          cpus: "0.25"
      restart_policy:
        condition: on-failure
        delay: 5s # Wait 5s before restart
        max_attempts: 5 # Try 5 times before giving up
        window: 120s # Reset attempt counter after 2 minutes

  web:
    build:
      context: .
      dockerfile: Dockerfile.digitalocean
      target: web
    restart: unless-stopped # Better restart policy
    ports:
      - "3000:3000"
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_URL:-http://localhost:8080}
    depends_on:
      api:
        condition: service_healthy
    networks:
      - app-network
    healthcheck:
      test:
        [
          "CMD",
          "wget",
          "--no-verbose",
          "--tries=1",
          "--spider",
          "http://localhost:3000/health",
        ]
      interval: 20s
      timeout: 5s
      retries: 3
      start_period: 30s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: "0.5"
        reservations:
          memory: 128M
          cpus: "0.1"
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 5
        window: 120s

  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ../configs/nginx.conf:/etc/nginx/nginx.conf
      - ../configs/ssl:/etc/ssl/certs
      - /etc/letsencrypt:/etc/letsencrypt
    depends_on:
      - web
      - api
    networks:
      - app-network

volumes:
  postgres_data:
    driver: local

networks:
  app-network:
    driver: bridge
    internal: false
