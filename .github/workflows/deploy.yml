name: ðŸš€ Deploy Questly (Direct Node.js)

on:
  push:
    branches: [main]
  workflow_dispatch:

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: ðŸ“¥ Checkout code
        uses: actions/checkout@v4

      - name: ðŸ“¦ Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 10.13.1

      - name: ðŸŸ¢ Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: ðŸ“¦ Install dependencies
        run: pnpm install --frozen-lockfile

      - name: ðŸ”¨ Build packages
        run: pnpm exec turbo run build
        timeout-minutes: 10

      - name: ðŸ§ª Run tests
        run: pnpm exec turbo run test
        timeout-minutes: 5

  # Deploy to DigitalOcean using rebuild script
  deploy:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    steps:
      - name: ðŸš€ Deploy to DigitalOcean
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.DO_HOST }}
          username: ${{ secrets.DO_USER }}
          key: ${{ secrets.DO_SSH_PRIVATE_KEY }}
          script: |
            # Install Node.js and pnpm if not installed
            if ! command -v node &> /dev/null; then
              echo "ðŸŸ¢ Installing Node.js..."
              curl -fsSL https://deb.nodesource.com/setup_18.x | sudo -E bash -
              sudo apt install -y nodejs
            fi

            if ! command -v pnpm &> /dev/null; then
              echo "ðŸ“¦ Installing pnpm..."
              npm install -g pnpm
            fi

            # Install PM2 if not installed
            if ! command -v pm2 &> /dev/null; then
              echo "âš¡ Installing PM2..."
              npm install -g pm2
              pm2 install pm2-logrotate
            fi

            # Create directory structure and clone if needed
            mkdir -p /var/www/questly
            cd /var/www/questly

            if [ ! -d ".git" ]; then
              git clone https://github.com/${{ github.repository }}.git .
            fi

            # Create PM2 log directory
            sudo mkdir -p /var/log/pm2
            sudo chown -R $USER:$USER /var/log/pm2

            # Run the rebuild script (handles everything: git pull, migrations, build, deploy)
            chmod +x rebuild-application.sh
            ./rebuild-application.sh
