name: 🚀 Deploy Questly to DigitalOcean

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/questly

jobs:
  # Test and Build Job
  test-and-build:
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile

      - name: � Build packages
        run: pnpm build
        timeout-minutes: 10

      - name: 🧪 Run tests
        run: pnpm test
        timeout-minutes: 5

  # Docker Build and Push Job
  docker-build:
    runs-on: ubuntu-latest
    needs: test-and-build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile.digitalocean
          target: ${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # Deploy to DigitalOcean
  deploy:
    runs-on: ubuntu-latest
    needs: [test-and-build, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      - name: 📝 Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to DigitalOcean
        run: |
          ssh ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            set -e
            echo "🌊 Starting deployment..."
            
            # Navigate to application directory
            cd /var/www/questly
            
            # Pull latest changes
            echo "📥 Pulling latest code..."
            git pull origin main
            
            # Create production environment file
            echo "🔧 Setting up environment variables..."
            cat > .env.production << 'ENVEOF'
            # Production Environment Variables
            NODE_ENV=production
            PORT=3001
            
            # Database
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            
            # Authentication
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}
            BETTER_AUTH_URL=${{ secrets.API_URL }}
            
            # API Configuration
            API_URL=${{ secrets.API_URL }}
            
            # Frontend Configuration
            FRONTEND_URL=${{ secrets.FRONTEND_URL }}
            NEXT_PUBLIC_API_URL=${{ secrets.API_URL }}
            NEXT_PUBLIC_AUTH_URL=${{ secrets.API_URL }}
            
            # Google OAuth
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}
            
            # PostgreSQL Container Config
            POSTGRES_DB=${{ secrets.POSTGRES_DB }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          ENVEOF
            
            # Source the environment file
            set -a
            source .env.production
            set +a
            
            # Login to GitHub Container Registry
            echo "🔐 Logging into container registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Stop current services
            echo "🛑 Stopping current services..."
            docker-compose -f deployment/docker/docker-compose.prod.yml --env-file .env.production down || true
            
            # Pull latest images
            echo "📦 Pulling latest Docker images..."
            docker pull ghcr.io/vinayak-00017/questly-api:latest
            docker pull ghcr.io/vinayak-00017/questly-web:latest
            
            # Update docker-compose to use new images
            export API_IMAGE="ghcr.io/vinayak-00017/questly-api:latest"
            export WEB_IMAGE="ghcr.io/vinayak-00017/questly-web:latest"
            
            # Start services
            echo "🚀 Starting services..."
            docker-compose -f deployment/docker/docker-compose.prod.yml --env-file .env.production up -d
            
            # Wait for services to be ready
            echo "⏳ Waiting for services to be ready..."
            sleep 30
            
            # Run database migrations
            echo "🗄️ Running database migrations..."
            docker-compose -f deployment/docker/docker-compose.prod.yml --env-file .env.production exec -T api npm run db:migrate || echo "Migration failed, continuing..."
            
            # Health check
            echo "🏥 Running health checks..."
            timeout 60 bash -c 'until curl -f http://localhost:8080/health >/dev/null 2>&1; do sleep 2; done' || echo "Health check timeout"
            
            # Clean up old images
            echo "🧹 Cleaning up old Docker images..."
            docker image prune -f
            
            echo "✅ Deployment completed successfully!"
            docker-compose -f deployment/docker/docker-compose.prod.yml --env-file .env.production ps
          EOF

      - name: 🔔 Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            MESSAGE="✅ Questly deployment to DigitalOcean completed successfully!"
          else
            MESSAGE="❌ Questly deployment to DigitalOcean failed!"
          fi
          echo "Deployment status: $MESSAGE"
