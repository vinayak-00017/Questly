name: 🚀 Deploy Questly to DigitalOcean (Fast)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Quick Build and Test Job
  quick-build:
    runs-on: ubuntu-latest
    timeout-minutes: 15  # Maximum 15 minutes
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 📦 Setup pnpm
        uses: pnpm/action-setup@v4

      - name: 🟢 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"
          cache: "pnpm"

      - name: 📦 Install dependencies
        run: pnpm install --frozen-lockfile
        timeout-minutes: 3

      - name: 🔨 Build packages
        run: pnpm build
        timeout-minutes: 8

      - name: ✅ Verify build outputs
        run: |
          echo "🔍 Checking build outputs..."
          ls -la apps/api/dist/
          ls -la apps/web/.next/
          echo "✅ Build verification complete!"

  # Docker Build and Push Job
  docker-build:
    runs-on: ubuntu-latest
    timeout-minutes: 20  # Maximum 20 minutes for Docker builds
    needs: quick-build
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: read
      packages: write

    strategy:
      matrix:
        service: [api, web]

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🐳 Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: 🔐 Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: 📝 Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.service }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}

      - name: 🔨 Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./deployment/docker/Dockerfile.digitalocean
          target: ${{ matrix.service }}
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
        timeout-minutes: 15

  # Deploy to DigitalOcean
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 10  # Maximum 10 minutes for deployment
    needs: [quick-build, docker-build]
    if: github.ref == 'refs/heads/main'
    environment: production

    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4

      - name: 🔐 Setup SSH
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.DO_SSH_PRIVATE_KEY }}

      - name: 📝 Add server to known hosts
        run: |
          ssh-keyscan -H ${{ secrets.DO_HOST }} >> ~/.ssh/known_hosts

      - name: 🚀 Deploy to DigitalOcean
        run: |
          ssh ${{ secrets.DO_USER }}@${{ secrets.DO_HOST }} << 'EOF'
            set -e
            echo "🌊 Starting fast deployment..."
            
            # Navigate to application directory
            cd /var/www/questly
            
            # Pull latest changes
            echo "📥 Pulling latest code..."
            git pull origin main
            
            # Create production environment file
            echo "🔧 Setting up environment variables..."
            cat > .env.production << 'ENVEOF'
            NODE_ENV=production
            PORT=3001
            DATABASE_URL=${{ secrets.DATABASE_URL }}
            JWT_SECRET=${{ secrets.JWT_SECRET }}
            BETTER_AUTH_SECRET=${{ secrets.BETTER_AUTH_SECRET }}
            BETTER_AUTH_URL=${{ secrets.API_URL }}
            API_URL=${{ secrets.API_URL }}
            FRONTEND_URL=${{ secrets.FRONTEND_URL || 'https://questly.com' }}
            NEXT_PUBLIC_API_URL=${{ secrets.API_URL }}
            NEXT_PUBLIC_AUTH_URL=${{ secrets.API_URL }}
            GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID || '' }}
            GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET || '' }}
            POSTGRES_DB=${{ secrets.POSTGRES_DB || 'questly' }}
            POSTGRES_USER=${{ secrets.POSTGRES_USER || 'questly' }}
            POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}
          ENVEOF
            
            # Login to GitHub Container Registry
            echo "🔐 Logging into container registry..."
            echo ${{ secrets.GITHUB_TOKEN }} | docker login ghcr.io -u ${{ github.actor }} --password-stdin
            
            # Stop current services gracefully
            echo "🛑 Stopping current services..."
            docker-compose -f deployment/docker/docker-compose.prod.yml down --timeout 30 || true
            
            # Pull latest images with timeout
            echo "📦 Pulling latest Docker images..."
            timeout 300 docker pull ghcr.io/${{ github.repository }}-api:latest || echo "API image pull failed, continuing..."
            timeout 300 docker pull ghcr.io/${{ github.repository }}-web:latest || echo "Web image pull failed, continuing..."
            
            # Start services
            echo "🚀 Starting services..."
            docker-compose -f deployment/docker/docker-compose.prod.yml up -d --timeout 30
            
            # Quick health check
            echo "🏥 Quick health check..."
            sleep 15
            if curl -f http://localhost:8080/health >/dev/null 2>&1; then
              echo "✅ API health check passed!"
            else
              echo "⚠️ API health check failed, but continuing..."
            fi
            
            echo "✅ Fast deployment completed!"
            docker-compose -f deployment/docker/docker-compose.prod.yml ps
          EOF
        timeout-minutes: 8

      - name: 🔔 Notify deployment status
        if: always()
        run: |
          if [ "${{ job.status }}" == "success" ]; then
            echo "✅ Questly deployment completed successfully in under 10 minutes!"
          else
            echo "❌ Questly deployment failed!"
          fi
